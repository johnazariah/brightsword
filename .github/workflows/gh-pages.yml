name: Build and publish docs to GitHub Pages

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  test-gh-pages-push:
    name: Test GitHub Pages Push Permission
    runs-on: ubuntu-latest

    steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0
            persist-credentials: false  # we'll set our own remote

        - name: Configure git identity
          run: |
            git config --global user.name  "github-actions[bot]"
            git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git config --global --add safe.directory "$GITHUB_WORKSPACE"

        - name: Set remote with GITHUB_TOKEN
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          run: |
              git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git"
              echo "Remote:"
              git remote -v

        - name: Fetch gh-pages
          run: |
            git fetch origin gh-pages || true
            git branch -a
            git log --oneline -n 1 || true
            git log --oneline origin/gh-pages -n 1 || true

        - name: Check push permission + reason (dry-run)
          id: check_push
          shell: bash
          run: |
            set -euo pipefail

            # Try a verbose dry-run so we can inspect the exact error
            set +e
            DRYRUN_OUTPUT="$(git push --porcelain --dry-run origin HEAD:gh-pages 2>&1)"
            STATUS=$?
            set -e

            echo "---- git push --dry-run output ----"
            echo "$DRYRUN_OUTPUT"
            echo "-----------------------------------"

            # Classify common failure modes
            if [ $STATUS -eq 0 ]; then
                echo "can_push=true" >> "$GITHUB_OUTPUT"
                echo "reason=ok" >> "$GITHUB_OUTPUT"
                echo "✅ Dry-run push would succeed"
                exit 0
            fi

            # Permission errors
            if echo "$DRYRUN_OUTPUT" | grep -qiE "Permission to .+ denied|Authentication failed|HTTP Basic: Access denied|cannot read Username"; then
                echo "can_push=false" >> "$GITHUB_OUTPUT"
                echo "reason=auth" >> "$GITHUB_OUTPUT"
                echo "❌ Dry-run failed: authentication/permissions"
                exit 1
            fi

            # Protected branch
            if echo "$DRYRUN_OUTPUT" | grep -qiE "protected branch hook declined|cannot lock ref|protected.*branch"; then
                echo "can_push=false" >> "$GITHUB_OUTPUT"
                echo "reason=protected" >> "$GITHUB_OUTPUT"
                echo "❌ Dry-run failed: branch protection on gh-pages"
                exit 1
            fi

            # Non fast-forward
            if echo "$DRYRUN_OUTPUT" | grep -qi "non-fast-forward"; then
                echo "can_push=false" >> "$GITHUB_OUTPUT"
                echo "reason=non_ff" >> "$GITHUB_OUTPUT"
                echo "❌ Dry-run failed: non-fast-forward (history diverged)"
                exit 1
            fi

            # Fallback
            echo "can_push=false" >> "$GITHUB_OUTPUT"
            echo "reason=unknown" >> "$GITHUB_OUTPUT"
            echo "❌ Dry-run failed: unknown reason"
            exit 1

  publish-docs:
    name: Build, Generate and Publish docs to gh-pages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Build packages (restore & build)
        run: |
          echo "Building packages for docs generation"
          dotnet msbuild Build.proj /t:"Restore;BuildPackages" /p:Configuration=Release /v:minimal

      - name: Generate HTML docs from XML and project docs
        run: |
          pwsh -NoProfile -NonInteractive -File ./scripts/generate-docs.ps1

      - name: Verify docs generated
        run: |
          echo "Verifying artifacts/docs exists and is not empty"
          if [ ! -d "artifacts/docs" ]; then echo "No docs found at artifacts/docs"; exit 1; fi
          COUNT=$(find artifacts/docs -type f | wc -l)
          echo "Files found: $COUNT"
          if [ "$COUNT" -eq "0" ]; then echo "No files in artifacts/docs"; exit 1; fi

      - name: Configure git
        run: |
          echo "Checking whether GITHUB_TOKEN can push to gh-pages branch..."
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '10.0.x'

      - name: Set remote with token
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git"

      - name: Check push permission for GITHUB_TOKEN
        id: check_push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          git fetch origin gh-pages || true
          if git push --dry-run origin HEAD:gh-pages >/dev/null 2>&1; then
            echo "can_push=true" >> $GITHUB_OUTPUT
            echo "Dry-run push would succeed"
          else
            echo "can_push=false" >> $GITHUB_OUTPUT
            echo "Dry-run push failed"
          fi

      - name: Deploy to GitHub Pages (direct push)
        if: steps.check_push.outputs.can_push == 'true'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: ./artifacts/docs

      - name: Create PR with docs if direct push blocked
        if: steps.check_push.outputs.can_push == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_BRANCH: gh-pages-docs-${{ github.sha }}
        run: |
          set -euo pipefail
          echo "Creating a pull request with docs because direct push is blocked"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Inspect generated docs layout for debugging
          echo "Contents of artifacts/docs (post-generation):"
          ls -la artifacts/docs || true

          # Create an orphan branch to contain only the docs
          git checkout --orphan "$PR_BRANCH"
          git rm -rf . >/dev/null 2>&1 || true

          # Copy docs into repo root using a tar stream to avoid rsync 'vanished' issues
          if [ -d "artifacts/docs" ]; then
            echo "Streaming artifacts/docs into repo root via tar"
            (cd artifacts/docs && tar -cf - .) | tar -C . -xvf - || true
          else
            echo "No artifacts/docs directory found to copy"
          fi

          echo "Contents of repo root after copying docs:"
          ls -la || true

          # Stage all files for commit
          git add -A

          # Ensure there is something to commit. If no files were staged, abort with helpful message.
          if [ -z "$(git status --porcelain)" ]; then
            echo "No files to commit after copying docs. Check the generator output and that artifacts/docs contained generated files."
            exit 1
          fi

          git commit -m "chore(docs): update gh-pages from CI ${{ github.sha }}"
          # Use force-with-lease to update branch if remote already exists but avoid overwriting unrelated changes
          git push --force-with-lease origin "$PR_BRANCH"

          # Create PR via GitHub API
          PR_TITLE="Automated docs update from CI (${GITHUB_SHA:0:7})"
          PR_BODY="This PR contains an automated docs update produced by CI. If the change is acceptable, merge to update the 'gh-pages' branch."
          API_JSON=$(jq -n --arg title "$PR_TITLE" --arg head "$PR_BRANCH" --arg base "gh-pages" --arg body "$PR_BODY" '{title:$title,head:$head,base:$base,body:$body}')
          RESP=$(curl -s -H "Authorization: token ${GITHUB_TOKEN}" -H "Accept: application/vnd.github+json" https://api.github.com/repos/${{ github.repository }}/pulls -d "$API_JSON")
          echo "PR created: $(echo "$RESP" | jq -r '.html_url // "(no url)"')"
