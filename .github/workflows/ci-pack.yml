name: CI - Pack and optional publish

on:
  push:
    branches: [ main ]
    tags: [ 'v*', 'swissknife-v*', 'feber-v*' ]
  workflow_dispatch:
    inputs:
      publish:
        description: 'Publish action: publish-swissknife or publish-feber (blank for no publish)'
        required: false
        default: ''

env:
  ARTIFACT_DIR: ./artifacts
  NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

jobs:
  pack_swissknife:
    runs-on: ubuntu-latest
    outputs:
      bumped_versions: ${{ steps.publish_swissknife_step.outputs.bumped_versions }}
      SwissKnifeVersion: ${{ steps.publish_swissknife_step.outputs.SwissKnifeVersion }}
      FeberVersion: ${{ steps.publish_swissknife_step.outputs.FeberVersion }}
    # Run on normal pushes or when explicitly dispatched to publish swissknife
    if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.publish == 'publish-swissknife' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '10.0.x'

      - name: Restore
        run: dotnet restore BrightSword.sln

      - name: Show bumped_versions from pack_swissknife (if any)
        run: |
          echo "bumped_versions from pack_swissknife: ${{ needs['pack_swissknife'].outputs.bumped_versions }}"
          echo "SwissKnifeVersion: ${{ needs['pack_swissknife'].outputs.SwissKnifeVersion }}"
          echo "FeberVersion: ${{ needs['pack_swissknife'].outputs.FeberVersion }}"

      # (removed local debug step) show/consumption of bumped_versions is done in downstream jobs

      - name: Build
        run: dotnet build BrightSword.sln -c Release --no-restore

      - name: Run PublishSwissknife target (MSBuild)
        id: publish_swissknife_step
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}
          DO_COMMIT: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.publish == 'publish-swissknife') || startsWith(github.ref, 'refs/tags/swissknife-v') }}
        run: |
          TAG=""
          if [[ "$GITHUB_REF" =~ ^refs/tags/swissknife-v ]]; then
            TAG=${GITHUB_REF#refs/tags/swissknife-v}
          fi
          echo "Invoking msbuild PublishSwissknife (VersionFromTag=$TAG)"
          dotnet msbuild build.proj -t:PublishSwissknife -p:DoCommit=$DO_COMMIT -p:NUGET_API_KEY=$NUGET_API_KEY -p:GitRefName=$GITHUB_REF_NAME -p:VersionFromTag=$TAG

      # bumped_versions and per-package outputs are written directly by tools/bump_versions.py
      # into the step's GITHUB_OUTPUT file when running inside GitHub Actions. The msbuild
      # step above has id=publish_swissknife_step so its outputs are available as job outputs.

      - name: Upload NuGet artifact
        uses: actions/upload-artifact@v4
        with:
          name: swissknife-nugets
          path: ${{ env.ARTIFACT_DIR }}

  pack-feber:
    runs-on: ubuntu-latest
    needs: pack_swissknife
    outputs:
      bumped_versions: ${{ steps.publish_feber_step.outputs.bumped_versions }}
    # Run on normal pushes, or when dispatch publishes feber or swissknife (swissknife publishes feber transitively)
    if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.publish == 'publish-feber' || github.event.inputs.publish == 'publish-swissknife' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '10.0.x'

      # NOTE: We intentionally do NOT add a PackageReference to the Feber csproj here.
      # Both projects are packed independently so each produces its own NuGet package.

      - name: Restore
        run: dotnet restore BrightSword.sln

      - name: Run PublishFeber target (MSBuild)
        id: publish_feber_step
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}
          DO_COMMIT: ${{ (github.event_name == 'workflow_dispatch' && (github.event.inputs.publish == 'publish-feber' || github.event.inputs.publish == 'publish-swissknife')) || startsWith(github.ref, 'refs/tags/feber-v') || startsWith(github.ref, 'refs/tags/swissknife-v') }}
        run: |
          TAG=""
          if [[ "$GITHUB_REF" =~ ^refs/tags/feber-v ]]; then
            TAG=${GITHUB_REF#refs/tags/feber-v}
          fi
          echo "Invoking msbuild PublishFeber (VersionFromTag=$TAG)"
          dotnet msbuild build.proj -t:PublishFeber -p:DoCommit=$DO_COMMIT -p:NUGET_API_KEY=$NUGET_API_KEY -p:GitRefName=$GITHUB_REF_NAME -p:VersionFromTag=$TAG

      # bumped_versions are written by tools/bump_versions.py into this step's GITHUB_OUTPUT

      - name: Upload Feber NuGet artifact
        uses: actions/upload-artifact@v4
        with:
          name: feber-nugets
          path: ${{ env.ARTIFACT_DIR }}

      - name: "Optional: Publish packages to NuGet.org"
        run: |
          if [ -n "$(ls $ARTIFACT_DIR/*.nupkg 2>/dev/null)" ] && [ -n "$NUGET_API_KEY" ]; then
            echo "Publishing packages to NuGet.org"
            for nupkg in $ARTIFACT_DIR/*.nupkg; do
              echo "Pushing $nupkg"
              dotnet nuget push "$nupkg" -k $NUGET_API_KEY -s https://api.nuget.org/v3/index.json || echo "Push failed for $nupkg"
            done
          else
            echo "Skipping NuGet publish - no nupkg artifacts or NUGET_API_KEY missing"
          fi
